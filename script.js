

mapboxgl.accessToken = 'pk.eyJ1IjoidmFkaXNsYXdzIiwiYSI6ImNtYjFqdmRuMjB4MjYybXIwNWZrNHhqYXEifQ.ymvKw2wOVVot-GHrwlqfjA';

const map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/mapbox/satellite-streets-v12',
  center: [71.4704, 51.1605], // –ê—Å—Ç–∞–Ω–∞
  zoom: 11
});

const mapStyles = [
  'mapbox://styles/mapbox/streets-v12',
  'mapbox://styles/mapbox/light-v11',
  'mapbox://styles/mapbox/satellite-streets-v12'
];


//form,profile
document.getElementById('profileBtn').addEventListener('click', () => {
    const user = localStorage.getItem('user');
    if (user) {
        window.location.href = 'profile/profile.html';
    } else {
      window.location.href = 'signup/signup.html';
    }
  });
  

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
document.getElementById('profileBtn').addEventListener('click', () => {
    const user = localStorage.getItem('user');
    if (user) {
      window.location.href = 'profile/profile.html';
    } else {
      window.location.href = 'signup/signup.html';
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.addEventListener('DOMContentLoaded', () => {
    const user = JSON.parse(localStorage.getItem('user'));
    if (user) {
      console.log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,', user.firstname);
      // –ü—Ä–∏–º–µ—Ä: –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ—Ñ–∏–ª—å"
      document.getElementById('profileBtn').textContent = `${user.firstname}`;
    }
  });


  let lastUpdate = 0;
  const updateDelay = 5 * 1000; 
  
  
async function fetchWeather(lat, lon) {
  try {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,wind_speed_10m,weather_code&timezone=auto`;
    const res = await fetch(url);
    const data = await res.json();

    document.getElementById('temperature').textContent = Math.round(data.current.temperature_2m);
    document.getElementById('wind').textContent = Math.round(data.current.wind_speed_10m);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
    const code = data.current.weather_code;
    const icon = document.getElementById('weather-icon');
    let lucideName = 'sun';

    if ([0, 1].includes(code)) lucideName = 'sun';             // —è—Å–Ω–æ
    else if ([2, 3].includes(code)) lucideName = 'cloud';      // –æ–±–ª–∞—á–Ω–æ
    else if ([45, 48].includes(code)) lucideName = 'cloud-fog'; // —Ç—É–º–∞–Ω
    else if (code >= 51 && code <= 67) lucideName = 'cloud-drizzle';
    else if (code >= 80 && code <= 82) lucideName = 'cloud-rain';
    else if (code >= 95 && code <= 99) lucideName = 'cloud-lightning';

    icon.setAttribute('data-lucide', lucideName);
    lucide.createIcons();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã:", err);
  }
}

async function updateWeatherIfNeeded() {
  const now = Date.now();
  if (now - lastUpdate >= updateDelay) {
    const center = map.getCenter();
    await fetchWeather(center.lat, center.lng);
    lastUpdate = now;
  }
}

map.on('moveend', updateWeatherIfNeeded);

map.on('load', () => {
  const center = map.getCenter();
  fetchWeather(center.lat, center.lng);
  lastUpdate = Date.now();
  loadNoFlyZones();
});

setInterval(updateWeatherIfNeeded, updateDelay);

map.on('load', () => {
  fetch('zonestest.geojson')
    .then(res => res.json())
    .then(originalData => {
      const polygonFeatures = [];
      const circleFeatures = [];

      for (const feature of originalData.features) {
        if (feature.geometry.type === 'Polygon') {
          polygonFeatures.push(feature);
        } else if (feature.geometry.type === 'Point' && feature.properties.radius_m) {
          // –°–æ–∑–¥–∞—ë–º –∫—Ä—É–≥ —á–µ—Ä–µ–∑ turf.js
          const circle = turf.circle(feature.geometry.coordinates, feature.properties.radius_m / 1000, {
            steps: 64,
            units: 'kilometers',
            properties: feature.properties
          });
          circleFeatures.push(circle);
        }
      }

      const mergedFeatures = [...polygonFeatures, ...circleFeatures];
      const geojsonData = {
        type: 'FeatureCollection',
        features: mergedFeatures
      };

      map.addSource('no-fly-zones', {
        type: 'geojson',
        data: geojsonData
      });

      map.addLayer({
        id: 'no-fly-layer',
        type: 'fill',
        source: 'no-fly-zones',
        paint: {
          'fill-color': '#ff0000',
          'fill-opacity': 0.4
        }
      });

      map.addLayer({
        id: 'no-fly-outline',
        type: 'line',
        source: 'no-fly-zones',
        paint: {
          'line-color': '#ff0000',
          'line-width': 2
        }
      });

      // –ü–æ–ø–∞–ø—ã
      map.on('click', 'no-fly-layer', (e) => {
        const props = e.features[0].properties;

        const html = `
          <div style="font-family: Arial, sans-serif; font-size: 13px; line-height: 1.4; max-width: 220px;">
            <div style="font-weight: bold; font-size: 14px; margin-bottom: 6px;">üõë –ó–æ–Ω–∞ ${props.id}</div>
            <div><strong>–í—ã—Å–æ—Ç–∞:</strong> ${props.altitude || "‚Äî"}</div>
            <div><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:</strong> ${props.limit || "‚Äî"}</div>
            <div><strong>–°—Ç–∞—Ç—É—Å:</strong> ${props.active || "‚Äî"}</div>
            ${props.radius_m ? `<div><strong>–†–∞–¥–∏—É—Å:</strong> ${props.radius_m / 1000} –∫–º</div>` : ""}
          </div>
        `;

        new mapboxgl.Popup()
          .setLngLat(e.lngLat)
          .setHTML(html)
          .addTo(map);
      });

      map.on('mouseenter', 'no-fly-layer', () => {
        map.getCanvas().style.cursor = 'pointer';
      });
      map.on('mouseleave', 'no-fly-layer', () => {
        map.getCanvas().style.cursor = '';
      });
    });
});


function loadNoFlyZones() {
  fetch('zonestest.geojson')
    .then(res => res.json())
    .then(originalData => {
      const polygonFeatures = [];
      const circleFeatures = [];

      for (const feature of originalData.features) {
        if (feature.geometry.type === 'Polygon') {
          polygonFeatures.push(feature);
        } else if (feature.geometry.type === 'Point' && feature.properties.radius_m) {
          const circle = turf.circle(feature.geometry.coordinates, feature.properties.radius_m / 1000, {
            steps: 64,
            units: 'kilometers',
            properties: feature.properties
          });
          circleFeatures.push(circle);
        }
      }

      const mergedFeatures = [...polygonFeatures, ...circleFeatures];
      const geojsonData = {
        type: 'FeatureCollection',
        features: mergedFeatures
      };

      map.addSource('no-fly-zones', {
        type: 'geojson',
        data: geojsonData
      });

      map.addLayer({
        id: 'no-fly-layer',
        type: 'fill',
        source: 'no-fly-zones',
        paint: {
          'fill-color': '#ff0000',
          'fill-opacity': 0.4
        }
      });

      map.addLayer({
        id: 'no-fly-outline',
        type: 'line',
        source: 'no-fly-zones',
        paint: {
          'line-color': '#ff0000',
          'line-width': 2
        }
      });

      map.on('click', 'no-fly-layer', (e) => {
        const props = e.features[0].properties;
        const html = `
          <div style="font-family: Arial, sans-serif; font-size: 13px; line-height: 1.4; max-width: 220px;">
            <div style="font-weight: bold; font-size: 14px; margin-bottom: 6px;">üõë –ó–æ–Ω–∞ ${props.id}</div>
            <div><strong>–í—ã—Å–æ—Ç–∞:</strong> ${props.altitude || "‚Äî"}</div>
            <div><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:</strong> ${props.limit || "‚Äî"}</div>
            <div><strong>–°—Ç–∞—Ç—É—Å:</strong> ${props.active || "‚Äî"}</div>
            ${props.radius_m ? `<div><strong>–†–∞–¥–∏—É—Å:</strong> ${props.radius_m / 1000} –∫–º</div>` : ""}
          </div>
        `;
        new mapboxgl.Popup().setLngLat(e.lngLat).setHTML(html).addTo(map);
      });

      map.on('mouseenter', 'no-fly-layer', () => {
        map.getCanvas().style.cursor = 'pointer';
      });

      map.on('mouseleave', 'no-fly-layer', () => {
        map.getCanvas().style.cursor = '';
      });
    });
}




const astanaCenter = [71.4304, 51.1282];
const defaultZoom = 11.5;

const styles = [
  'mapbox://styles/mapbox/satellite-streets-v12',
  'mapbox://styles/mapbox/streets-v12',
  'mapbox://styles/mapbox/light-v11'
];
let currentStyleIndex = 0;

// –ö–Ω–æ–ø–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
document.getElementById('center-btn').addEventListener('click', centerMap);

function centerMap() {
  map.flyTo({
    center: astanaCenter,
    zoom: defaultZoom,
    essential: true
  });
}

document.getElementById('style-toggle-btn').addEventListener('click', () => {
  currentStyleIndex = (currentStyleIndex + 1) % styles.length;
  map.setStyle(styles[currentStyleIndex]);

  map.once('style.load', () => {
    loadNoFlyZones();           // ‚úÖ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    updateWeatherIfNeeded();    // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É
    lucide.createIcons();       // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏
    document.getElementById('center-btn').addEventListener('click', centerMap); // –ø–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–Ω–æ–≤–æ —Ü–µ–Ω—Ç—Ä
  });

  if (window.adminGeometry) {
    showFlightGeometryOnMap(window.adminGeometry);
  }
});


document.getElementById('zoom-in-btn').addEventListener('click', () => {
  map.zoomIn({ duration: 300 });
});

document.getElementById('zoom-out-btn').addEventListener('click', () => {
  map.zoomOut({ duration: 300 });
});


document.querySelector('.sidebar-item:nth-child(2)').addEventListener('click', () => {
  document.getElementById('flights-panel').classList.remove('open'); // ‚¨Ö –∑–∞–∫—Ä—ã–≤–∞–µ–º "–ü–æ–ª—ë—Ç—ã"
  document.getElementById('monitor-panel').classList.remove('open');
  document.getElementById('flight-panel').classList.add('open');
  fillDroneOptions();
});

document.getElementById('flight-panel-close').addEventListener('click', () => {
  document.getElementById('monitor-panel').classList.remove('open');
  document.getElementById('flight-panel').classList.remove('open');
});

function fillDroneOptions() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const select = document.getElementById('droneSelect');
  select.innerHTML = `<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä–æ–Ω</option>`;
  (user.drones || []).forEach(drone => {
    const opt = document.createElement('option');
    opt.value = drone.serial;
    opt.textContent = `${drone.brand} ${drone.model} (${drone.serial})`;
    select.appendChild(opt);
  });
}



document.getElementById('flightForm').addEventListener('submit', (e) => {
  e.preventDefault();

  const title = document.getElementById('flightTitle').value.trim();
  const purpose = document.getElementById('flightPurpose').value.trim();
  const drone = document.getElementById('droneSelect').value;
  const min = parseInt(document.getElementById('minAlt').value);
  const max = parseInt(document.getElementById('maxAlt').value);
  const errorBox = document.getElementById('flightError');
  errorBox.style.display = 'none';

  const blocks = document.querySelectorAll('.schedule-block');
  const schedule = [];

  let scheduleError = false;
  blocks.forEach(block => {
    const day = block.querySelector('.flight-day').value;
    const start = block.querySelector('.flight-start').value;
    const end = block.querySelector('.flight-end').value;
    if (!day || !start || !end || start >= end) scheduleError = true;
    schedule.push({ day, start, end });
  });

  if (!title || !purpose || !drone || isNaN(min) || isNaN(max) || min < 0 || max <= min || scheduleError) {
    errorBox.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.';
    errorBox.style.display = 'block';
    return;
  }

  if (!window.flightGeometry) {
    errorBox.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–æ–ª—ë—Ç–∞.';
    errorBox.style.display = 'block';
    return;
  }

  const newFlight = {
    title,
    purpose,
    droneSerial: drone,
    altitude: { min, max },
    schedule,
    geometry: window.flightGeometry,
    status: 'pending',
    createdAt: Date.now(),
    userEmail: JSON.parse(localStorage.getItem('user')).email
  };

  const existing = JSON.parse(localStorage.getItem('flights') || '[]');
  existing.push(newFlight);
  localStorage.setItem('flights', JSON.stringify(existing));

  // üßπ –£–±–∏—Ä–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Å –∫–∞—Ä—Ç—ã
  ['drawing-geometry', 'drawing-line', 'corridor-line', 'drawing-points'].forEach(id => {
    if (map.getLayer(id)) map.removeLayer(id);
    if (map.getSource(id)) map.removeSource(id);
  });
  window.flightGeometry = null;
  drawingPoints = [];
  renderGeoCoords(); // –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ

  // üß≠ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
  geoBar.style.display = 'none';
  document.getElementById('flight-panel').classList.remove('open');

  showToast('–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');

});



document.getElementById('addScheduleBtn').addEventListener('click', () => {
  const block = document.createElement('div');
  block.className = 'schedule-block';
  block.innerHTML = `
    <input type="date" class="flight-day">
    <input type="time" class="flight-start">
    <input type="time" class="flight-end">
    <button type="button" class="remove-schedule" title="–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å">‚úñ</button>
  `;
  document.getElementById('schedule-container').appendChild(block);
});

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è
document.getElementById('schedule-container').addEventListener('click', (e) => {
  if (e.target.classList.contains('remove-schedule')) {
    e.target.closest('.schedule-block').remove();
  }
});

const geoBar = document.getElementById('geo-bar');
const geoBtns = document.querySelectorAll('.geo-btn');
const geoRadius = document.getElementById('geo-radius');
const geoWidth = document.getElementById('geo-width');
const geoDone = document.getElementById('geo-done');
const geoCancel = document.getElementById('geo-cancel');
const geoVisualBtn = document.getElementById('geo-visual');

let drawingMode = null;
let drawingPoints = [];
let geometryData = null;
let isVisual = false;

// –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏
document.getElementById('addGeometry').addEventListener('click', () => {
  document.getElementById('flight-panel').classList.remove('open');
  geoBar.style.display = 'flex';
  drawingPoints = [];
  resetGeometry();
});

// –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
geoBtns.forEach(btn => {
  btn.addEventListener('click', () => {
    drawingMode = btn.dataset.type;
    geoRadius.style.display = drawingMode === 'circle' ? 'inline-block' : 'none';
    geoWidth.style.display = drawingMode === 'corridor' ? 'inline-block' : 'none';
    resetGeometry();
  });
});



// –û—Ç–º–µ–Ω–∞
geoCancel.addEventListener('click', () => {
  geoBar.style.display = 'none';
  document.getElementById('flight-panel').classList.add('open');
  resetGeometry();
});

// –ì–æ—Ç–æ–≤–æ
geoDone.addEventListener('click', () => {
  geometryData = {
    type: drawingMode,
    points: drawingPoints,
    radius: +geoRadius.value || 0,
    width: +geoWidth.value || 0,
    visual: isVisual
  };
  window.flightGeometry = geometryData;
  drawingMode = null;
  geoBar.style.display = 'none';
  document.getElementById('flight-panel').classList.add('open');
});

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ —à–∏—Ä–∏–Ω—ã/—Ä–∞–¥–∏—É—Å–∞
geoRadius.addEventListener('input', renderGeometry);
geoWidth.addEventListener('input', renderGeometry);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏
map.on('click', (e) => {
  if (!drawingMode) return;
  const coord = [e.lngLat.lng, e.lngLat.lat];
  if (drawingMode === 'circle') {
    drawingPoints = [coord];
  } else {
    drawingPoints.push(coord);
  }
  renderGeometry();
});

map.on('click', 'drawing-points', (e) => {
  e.preventDefault();
  const clicked = turf.point(e.lngLat.toArray());

  let foundIndex = -1;
  drawingPoints.forEach((pt, i) => {
    const candidate = turf.point(pt);
    const distance = turf.distance(clicked, candidate, { units: 'meters' });

    if (distance < 10000 && foundIndex === -1) {
      foundIndex = i;
    }
  });

  if (foundIndex !== -1) {
    drawingPoints.splice(foundIndex, 1);
    renderGeometry();
  }
});

function renderGeoCoords() {
  const coordBox = document.getElementById('geo-coords');
  coordBox.innerHTML = '';

  if (drawingPoints.length === 0) {
    coordBox.style.display = 'none';
    return;
  }

  coordBox.style.display = 'block';

  const table = document.createElement('table');
  table.style.width = '100%';
  table.style.borderCollapse = 'collapse';

  drawingPoints.forEach((pt, i) => {
    const row = document.createElement('tr');
    row.style.background = '#f1f5f9';
    row.style.borderRadius = '6px';
    row.style.marginBottom = '4px';

    const coordCell = document.createElement('td');
    coordCell.textContent = `${pt[1].toFixed(5)}, ${pt[0].toFixed(5)}`;
    coordCell.style.padding = '6px';

    const btnCell = document.createElement('td');
    const btn = document.createElement('button');
    btn.textContent = '‚úñ';
    btn.dataset.index = i;
    btn.style.background = '#ef4444';
    btn.style.color = 'white';
    btn.style.border = 'none';
    btn.style.borderRadius = '4px';
    btn.style.padding = '4px 8px';
    btn.style.cursor = 'pointer';

    btnCell.appendChild(btn);
    row.appendChild(coordCell);
    row.appendChild(btnCell);
    table.appendChild(row);
  });

  coordBox.appendChild(table);
}



// –†–µ–Ω–¥–µ—Ä –≥–µ–æ–º–µ—Ç—Ä–∏–∏
function renderGeometry() {
  ['drawing-geometry', 'drawing-line', 'corridor-line', 'drawing-points'].forEach(id => {
    if (map.getLayer(id)) map.removeLayer(id);
    if (map.getSource(id)) map.removeSource(id);
  });

  let geo = null;

  if (drawingMode === 'circle' && drawingPoints.length === 1) {
    geo = turf.circle(drawingPoints[0], +geoRadius.value / 1000, { steps: 64, units: 'kilometers' });

  } else if (drawingMode === 'polygon' && drawingPoints.length >= 3) {
    geo = turf.polygon([[...drawingPoints, drawingPoints[0]]]);

  } else if (drawingMode === 'corridor' && drawingPoints.length >= 2) {
    const line = turf.lineString(drawingPoints);
    const buffered = turf.buffer(line, +geoWidth.value / 2000, { units: 'kilometers' });

    map.addSource('corridor-line', { type: 'geojson', data: line });
    map.addLayer({
      id: 'drawing-line',
      type: 'line',
      source: 'corridor-line',
      paint: {
        'line-color': '#22d3ee',
        'line-width': 3,
        'line-dasharray': [2, 2]
      }
    });

    geo = buffered;
  }

  if (geo) {
    map.addSource('drawing-geometry', { type: 'geojson', data: geo });
    map.addLayer({
      id: 'drawing-geometry',
      type: 'fill',
      source: 'drawing-geometry',
      paint: {
        'fill-color': '#60a5fa',
        'fill-opacity': 0.4
      }
    });
  }

  map.addSource('drawing-points', {
    type: 'geojson',
    data: {
      type: 'FeatureCollection',
      features: drawingPoints.map(coord => ({
        type: 'Feature',
        geometry: { type: 'Point', coordinates: coord }
      }))
    }
  });

  map.addLayer({
    id: 'drawing-points',
    type: 'circle',
    source: 'drawing-points',
    paint: {
      'circle-radius': 7,
      'circle-color': '#3b82f6',
      'circle-stroke-width': 2,
      'circle-stroke-color': '#fff'
    }
  });

  const enough =
    (drawingMode === 'circle' && drawingPoints.length === 1) ||
    (drawingMode === 'polygon' && drawingPoints.length >= 3) ||
    (drawingMode === 'corridor' && drawingPoints.length >= 2);

  geoDone.style.display = enough ? 'inline-block' : 'none';

  // üëá –î–û–ë–ê–í–¨ –í –°–ê–ú–û–ú –ö–û–ù–¶–ï
  renderGeoCoords();
}


// –°–±—Ä–æ—Å –≥–µ–æ–º–µ—Ç—Ä–∏–∏
function resetGeometry() {
  ['drawing-geometry', 'drawing-line', 'corridor-line', 'drawing-points'].forEach(id => {
    if (map.getLayer(id)) map.removeLayer(id);
    if (map.getSource(id)) map.removeSource(id);
  });
  drawingPoints = [];

  const coordBox = document.getElementById('geo-coords');
  coordBox.innerHTML = '';
  
  if (drawingPoints.length > 0) {
    coordBox.style.display = 'block';
    drawingPoints.forEach((pt, i) => {
      const div = document.createElement('div');
      div.className = 'coord-item';
      div.innerHTML = `
        ${pt[1].toFixed(5)}, ${pt[0].toFixed(5)}
        <button data-index="${i}">‚úñ</button>
      `;
      coordBox.appendChild(div);
    });
  } else {
    coordBox.style.display = 'none';
  }
  

  geoDone.style.display = 'none';
}

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∏–ª—è
map.on('style.load', () => {
  if (drawingPoints.length > 0) renderGeometry();
});

// --- –ì–ª–∞–∑–∏–∫ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ–ª–µ—Ç) ---
geoVisualBtn.addEventListener('click', () => {
  isVisual = !isVisual;
  geoVisualBtn.classList.toggle('active', isVisual);
  const icon = geoVisualBtn.querySelector('i');
  icon.setAttribute('data-lucide', isVisual ? 'eye' : 'eye-off');
  lucide.createIcons(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã
});

document.getElementById('geo-coords').addEventListener('click', (e) => {
  if (e.target.tagName === 'BUTTON') {
    const i = parseInt(e.target.dataset.index);
    drawingPoints.splice(i, 1);
    renderGeometry(); // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä!
  }
});


function showToast(message) {
  const toast = document.getElementById('toast');
  toast.textContent = message;
  toast.classList.add('show');

  setTimeout(() => {
    toast.classList.remove('show');
    setTimeout(() => {
      toast.style.display = 'none';
    }, 300);
  }, 3000);

  toast.style.display = 'block';
}



document.getElementById('flightsBtn').addEventListener('click', () => {
  document.getElementById('flight-panel').classList.remove('open'); // ‚¨Ö –∑–∞–∫—Ä—ã–≤–∞–µ–º "–ù–æ–≤—ã–π –ø–æ–ª—ë—Ç"
  document.getElementById('monitor-panel').classList.remove('open');
  document.getElementById('flights-panel').classList.add('open');
  loadFlights();
});



// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
document.getElementById('flights-panel-close').addEventListener('click', () => {
  document.getElementById('flight-panel').classList.remove('open');
  document.getElementById('monitor-panel').classList.remove('open'); // ‚¨Ö –∑–∞–∫—Ä—ã–≤–∞–µ–º "–ù–æ–≤—ã–π –ø–æ–ª—ë—Ç"
  document.getElementById('flights-panel').classList.add('open');
});

// –í–∫–ª–∞–¥–∫–∏ (–ê–∫—Ç–∏–≤–Ω—ã–µ / –ò—Å—Ç–æ—Ä–∏—è)
document.querySelectorAll('.flight-tab').forEach(tab => {
  tab.addEventListener('click', () => {
    document.querySelectorAll('.flight-tab').forEach(t => t.classList.remove('active'));
    tab.classList.add('active');
    loadFlights();
  });
});

// –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultTab = document.querySelector('.flight-tab[data-tab="active"]');
if (!document.querySelector('.flight-tab.active') && defaultTab) {
  defaultTab.classList.add('active');
}


function loadFlights() {
  const user = JSON.parse(localStorage.getItem('user'));
  const isAdmin = ['admin@example.com', 'supervisor@utm.kz'].includes(user.email); // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å email –∞–¥–º–∏–Ω–æ–≤
  const tab = document.querySelector('.flight-tab.active')?.dataset.tab || 'active';
  const allFlights = JSON.parse(localStorage.getItem('flights') || '[]');

  const now = Date.now();
  const activeFlights = allFlights.filter(f => f.schedule?.some(s => new Date(s.day + 'T' + s.end) > now));
  const historyFlights = allFlights.filter(f => !f.schedule?.some(s => new Date(s.day + 'T' + s.end) > now));

  const visibleFlights = (tab === 'active' ? activeFlights : historyFlights)
    .filter(f => isAdmin || user.drones?.some(d => d.serial === f.droneSerial));

  const grouped = {
    pending: [],
    approved: [],
    rejected: []
  };

  visibleFlights.forEach(f => {
    const status = f.status || 'pending';
    grouped[status].push(f);
  });

  const container = document.getElementById('flights-content');
  container.innerHTML = '';

  ['pending', 'approved', 'rejected'].forEach(status => {
    if (grouped[status].length === 0) return;

    const section = document.createElement('div');
    const title = document.createElement('h4');
    title.textContent = {
      pending: '–û–∂–∏–¥–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è',
      approved: '–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ',
      rejected: '–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ'
    }[status];
    section.appendChild(title);

    grouped[status].forEach((flight, index) => {
      const block = document.createElement('div');
      block.className = 'flight-block';
      block.style = 'padding: 10px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 6px; background: white;';

      block.innerHTML = `
        <div><strong>${flight.title}</strong></div>
        <div>–¶–µ–ª—å: ${flight.purpose}</div>
        <div>–î—Ä–æ–Ω: ${flight.droneSerial}</div>
        <div>–í—ã—Å–æ—Ç–∞: ${flight.altitude.min}-${flight.altitude.max} –º</div>
        <div>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${flight.schedule.map(s => `${s.day} ${s.start}-${s.end}`).join(', ')}</div>
      `;

      if (isAdmin) {
        const routeBtn = document.createElement('button');
        routeBtn.textContent = '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç';
        routeBtn.style = 'margin-top: 6px;';
        routeBtn.addEventListener('click', () => {
          showFlightGeometryOnMap(flight);
        });
        block.appendChild(routeBtn);
      
        // –ù–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email/—Ç–µ–ª–µ—Ñ–æ–Ω—É
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        const pilot = users.find(u => u.email === flight.userEmail);

        if (pilot) {
          const info = document.createElement('div');
          info.style = 'margin-top: 6px; font-size: 13px; color: #475569;';
          info.innerHTML = `
            <div><strong>–ü–∏–ª–æ—Ç:</strong> ${pilot.lastname} ${pilot.firstname}</div>
            <div><strong>–¢–µ–ª:</strong> ${pilot.phone}</div>
            <div><strong>Email:</strong> ${pilot.email}</div>
          `;
          block.appendChild(info);
        }
      }
      

      if (isAdmin && status === 'pending') {
        const controls = document.createElement('div');
        controls.style = 'margin-top: 8px;';
        controls.innerHTML = `
          <button class="approve-btn" data-id="${flight.createdAt}" style="margin-right: 6px;">–†–∞–∑—Ä–µ—à–∏—Ç—å</button>
          <button class="reject-btn" data-id="${flight.createdAt}">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
        `;
        block.appendChild(controls);
      }

      if (!isAdmin && status === 'rejected' && flight.reason) {
        const reason = document.createElement('div');
        reason.innerHTML = `<span style="color: red;"><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${flight.reason}</span>`;
        block.appendChild(reason);
      }

      section.appendChild(block);
    });

    container.appendChild(section);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∞
  document.querySelectorAll('.approve-btn, .reject-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const id = parseInt(btn.dataset.id);
      const flights = JSON.parse(localStorage.getItem('flights') || '[]');
      const flight = flights.find(f => f.createdAt === id);
      if (!flight) return;

      if (btn.classList.contains('reject-btn')) {
        const reason = prompt('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:');
        if (!reason) return;
        flight.status = 'rejected';
        flight.reason = reason;
      } else {
        flight.status = 'approved';
        delete flight.reason;
      }

      localStorage.setItem('flights', JSON.stringify(flights));
      loadFlights();
    });
  });
}



function showFlightGeometryOnMap(flight) {
  window.adminGeometry = flight;

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª–æ–∏
  ['admin-geometry', 'admin-outline'].forEach(id => {
    if (map.getLayer(id)) map.removeLayer(id);
    if (map.getSource(id)) map.removeSource(id);
  });

  if (!flight.geometry || !flight.geometry.points || flight.geometry.points.length === 0) return;

  let geo = null;

  if (flight.geometry.type === 'circle') {
    const center = flight.geometry.points[0];
    const radius = flight.geometry.radius || 0;
    if (!center || !radius) return;
    geo = turf.circle(center, radius / 1000, { steps: 64, units: 'kilometers' });
  } 
  else if (flight.geometry.type === 'polygon') {
    geo = turf.polygon([[...flight.geometry.points, flight.geometry.points[0]]]);
  } 
  else if (flight.geometry.type === 'corridor') {
    const line = turf.lineString(flight.geometry.points);
    geo = turf.buffer(line, flight.geometry.width / 2000, { units: 'kilometers' });
  }

  if (!geo) return;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—Ç–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
  const restricted = map.getSource('no-fly-zones')?._data?.features || [];
  const intersects = restricted.some(zone => turf.booleanIntersects(zone, geo));

  map.addSource('admin-geometry', {
    type: 'geojson',
    data: geo
  });

  map.addLayer({
    id: 'admin-geometry',
    type: 'fill',
    source: 'admin-geometry',
    paint: {
      'fill-color': intersects ? '#ef4444' : '#22c55e',
      'fill-opacity': 0.4
    }
  });

  map.addLayer({
    id: 'admin-outline',
    type: 'line',
    source: 'admin-geometry',
    paint: {
      'line-color': intersects ? '#dc2626' : '#15803d',
      'line-width': 2
    }
  });

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –∫–∞—Ä—Ç—ã –Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—é
  const bounds = turf.bbox(geo);
  map.fitBounds(bounds, { padding: 60 });

  if (intersects) {
    alert('‚ö† –ú–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—É—é –∑–æ–Ω—É!');
  }
}


// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
document.getElementById('monitorBtn').addEventListener('click', () => {
  document.getElementById('flight-panel').classList.remove('open');
  document.getElementById('flights-panel').classList.remove('open');
  document.getElementById('monitor-panel').classList.add('open');
  loadMonitorFlights();
});

document.getElementById('monitor-close').addEventListener('click', () => {
  document.getElementById('monitor-panel').classList.remove('open');
});

function loadMonitorFlights() {
  const container = document.getElementById('monitor-content');
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const all = JSON.parse(localStorage.getItem('flights') || '[]');

  const now = Date.now();
  const approved = all.filter(f =>
    f.status === 'approved' &&
    user.drones?.some(d => d.serial === f.droneSerial) &&
    f.schedule.some(s => new Date(s.day + 'T' + s.end) > now)
  );

  if (!approved.length) {
    container.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—ë—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.</p>';
    return;
  }

  container.innerHTML = '';

  approved.forEach(flight => {
    const block = document.createElement('div');
    block.className = 'flight-block';
    block.innerHTML = `
      <div><strong>${flight.title}</strong></div>
      <div>–¶–µ–ª—å: ${flight.purpose}</div>
      <div>–î—Ä–æ–Ω: ${flight.droneSerial}</div>
      <div>–í—ã—Å–æ—Ç–∞: ${flight.altitude.min}-${flight.altitude.max} –º</div>
      <div>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${flight.schedule.map(s => `${s.day} ${s.start}-${s.end}`).join(', ')}</div>
      <button class="start-flight" data-id="${flight.createdAt}">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
    `;
    container.appendChild(block);
  });

  document.querySelectorAll('.start-flight').forEach(btn => {
    btn.addEventListener('click', () => {
      const id = parseInt(btn.dataset.id);
      const allFlights = JSON.parse(localStorage.getItem('flights') || '[]');
      const flight = allFlights.find(f => f.createdAt === id);

      if (!flight) return alert("–û—à–∏–±–∫–∞: –ø–æ–ª—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");

      const now = Date.now();
      const isOutdated = !flight.schedule.some(s => new Date(s.day + 'T' + s.start) > now);

      if (isOutdated) {
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ "–Ω–µ—É–¥–∞—á–Ω—ã–π"
        flight.status = 'rejected';
        flight.reason = '–ó–∞–ø—É—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ—à–ª–æ.';
        localStorage.setItem('flights', JSON.stringify(allFlights));
        alert('‚ùå –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—à–ª–æ. –ü–æ–ª—ë—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.');
        loadMonitorFlights();
        return;
      }

      // –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –±—É–¥–µ—Ç —ç–º—É–ª—è—Ü–∏—è
      alert(`‚úÖ –ü–æ–ª—ë—Ç "${flight.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (—ç–º—É–ª—è—Ü–∏—è)`);
      // –ú–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä—ã—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    });
  });
}

